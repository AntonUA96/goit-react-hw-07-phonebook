{"version":3,"sources":["App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operation.js","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","components/ContactList/ContactsList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","filterChange","axios","defaults","baseURL","text","dispatch","post","then","data","catch","error","a","get","contactId","delete","getFilter","state","contacts","filter","getLoading","loading","getVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","INITIAL_STATE","phone","ContactForm","handleChangeForm","target","value","setState","handleFormSubmit","e","preventDefault","onAdd","props","id","uuidv4","this","fetchContacts","onSubmit","type","placeholder","onChange","Component","connect","contactsOperation","ContactListItem","onRemove","onClick","contactsSelectors","length","map","App","className","styles","container","isLoadingContacts","createReducer","_","payload","find","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","console","log","logger","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38d2a448.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","//import types from './contacts-types';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchontactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const removeContactRequest = createAction(\n  'contacts/removeContactRequest',\n);\nexport const removeContactSuccess = createAction(\n  'contacts/removeContactSuccess',\n);\nexport const removeContactError = createAction('contacts/removeContactError');\n\nexport const filterChange = createAction('contacts/filterChange');\n","import axios from 'axios';\nimport {\n  addContactError,\n  addContactSuccess,\n  addContactRequest,\n  removeContactError,\n  removeContactSuccess,\n  removeContactRequest,\n  fetchContactError,\n  fetchContactSuccess,\n  fetchContactRequest,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error));\n  }\n};\n\nconst addContacts = text => dispatch => {\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', text)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst removeContacts = contactId => dispatch => {\n  dispatch(removeContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(removeContactSuccess(contactId)))\n    .catch(error => dispatch(removeContactError(error)));\n};\n\nexport default {\n  addContacts,\n  fetchContacts,\n  removeContacts,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nconst getLoading = state => state.contacts.loading;\nconst getFilter = state => state.contacts.filter;\nconst getAllContacts = state => state.contacts.items;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  },\n);\nexport default { getLoading, getFilter, getVisibleContacts };\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport { contactsOperation } from '../../redux/contacts/index';\n\nconst INITIAL_STATE = {\n  phone: '',\n  name: '',\n};\n\nclass ContactForm extends Component {\n  state = INITIAL_STATE;\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n\n    const { name, phone } = this.state;\n    const { onAdd } = this.props;\n\n    // const isValidateForm = this.validateForm();\n    // if (!isValidateForm) return;\n    onAdd({ id: uuidv4(), name, phone });\n    this.setState(INITIAL_STATE);\n  };\n\n  // validateForm = () => {\n  //   const { name, phone } = this.state;\n  //   const { onChekUnique } = this.props;\n\n  //   if (!name || !phone) {\n  //     alert('Some file is empty');\n  //     return false;\n  //   }\n  //   return onChekUnique(name);\n  // };\n\n  // resetForm = () => {\n  //   this.setState(INITIAL_STATE);\n  // };\n\n  render() {\n    const { name, phone } = this.state;\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={this.handleChangeForm}\n        />\n        <input\n          type=\"text\"\n          name=\"phone\"\n          placeholder=\"Enter phone number\"\n          value={phone}\n          onChange={this.handleChangeForm}\n        />\n        <button type=\"submit\">Add Contact</button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onAdd: text => dispatch(contactsOperation.addContacts(text)),\n  fetchContacts: () => dispatch(contactsOperation.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport {\n  contactsOperation,\n  contactsSelectors,\n} from '../../redux/contacts/index';\n\nconst ContactListItem = ({ id, name, phone, onRemove }) => {\n  return (\n    <li>\n      {name}: {phone} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactListItem key={uuidv4()} {...contact} onRemove={onRemove} />\n      ))}\n    </ul>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  phone: PropTypes.string,\n  onRemove: PropTypes.func,\n};\n\n// const mapStateToProps = state => {\n//   const { filter, items } = state.contacts;\n//   const visibleContacts = items.filter(item =>\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n//   return {\n//     contacts: visibleContacts,\n//   };\n// };\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemove: id => dispatch(contactsOperation.removeContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, filterChange } from '../../redux/contacts/index';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={({ target }) => onChange(target.value)}\n      placeholder=\"Enter name for search\"\n    />\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(filterChange(e)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactList/ContactsList';\nimport Filter from './components/Filter/Filter';\nimport styles from './App.module.css';\nimport { connect } from 'react-redux';\nimport { contactsSelectors } from './redux/contacts/index';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // handleAddContacts = newContact =>\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [...contacts, newContact],\n  //   }));\n\n  // handleCheckUniqueContact = name => {\n  //   const { contacts } = this.state;\n\n  //   const checkContacts = !!contacts.find(contact => contact.name === name);\n\n  //   checkContacts && alert('This contact is already exist');\n\n  //   return !checkContacts;\n  // };\n\n  // handleRemoveContact = id => {\n  //   this.setState(({ contacts }) => ({\n  //     contacts: contacts.filter(contact => contact.id !== id),\n  //   }));\n  // };\n\n  // handleFilterChange = filter => {\n  //   this.setState({ filter });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parseContacts = JSON.parse(contacts);\n  //   if (parseContacts) {\n  //     this.setState({ contacts: parseContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const { filter } = this.state;\n    // const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className={styles.container}>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n        {this.props.isLoadingContacts && <h1>Загружаем...</h1>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\n// import types from './contacts-types';\nimport {\n  addContactError,\n  addContactSuccess,\n  addContactRequest,\n  removeContactError,\n  removeContactSuccess,\n  removeContactRequest,\n  fetchContactError,\n  fetchContactSuccess,\n  fetchContactRequest,\n  filterChange,\n} from './contacts-actions';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    if (state && state.find(contact => contact.name === payload.name)) {\n      alert('Пользователь с таким именем уже существует');\n      return state;\n    }\n    if (!payload.name || !payload.phone) {\n      alert('Данные не введены!');\n      return state;\n    }\n    return [...state, payload];\n  },\n  [removeContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\nconst filter = createReducer('', {\n  [filterChange]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [removeContactRequest]: () => true,\n  [removeContactSuccess]: () => false,\n  [removeContactError]: () => false,\n});\n// const items = (state = [], { type, payload }) => {\n//     switch (type) {\n//         case types.ADD:\n// if (state && state.find(contact => contact.name === payload.name)) {\n//     alert('Пользователь с таким именем уже существует');\n//     return state;\n// }\n// if (!payload.name || !payload.phone) {\n//     alert('Данные не введены!');\n//     return state;\n// }\n//             return [...state, payload];\n//         case types.REMOVE:\n//             return state.filter(contact => contact.id !== payload);\n//         default:\n//             return state;\n//     }\n// }\n// const filter = (state = '', { type, payload }) => {\n//     switch (type) {\n//         case types.FILTER_CHANGE:\n//             return payload;\n//             default:\n//                 return state;\n//     }\n// }\nexport default combineReducers({ loading, items, filter });\n","// import { createStore, combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n// import Filter from '../components/Filter';\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n// }\n// const rootReducer = combineReducers({\n//   contacts:contactsReducer,\n// })\n// const store = createStore(rootReducer, composeWithDevTools())\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// })\n// const persistedReducer = persistReducer(persistConfig,rootReducer )\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(persistConfig, contactsReducer),\n// })\n\nconst myMiddleware = store => next => action => {\n  console.log('моя прослойка');\n  next(action);\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  myMiddleware,\n  logger,\n];\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n// const persistore = persistStore(store);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistore}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}